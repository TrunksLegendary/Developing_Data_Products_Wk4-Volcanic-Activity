"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
crime <- read.csv("crime.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
setwd("~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/vol2")
setwd("~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/vol2")
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldat.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldat.csv", header=TRUE, stringsAsFactors=FALSE)
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
setwd("~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/vol2")
runApp("../vol2")
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# http://rpubs.com/insight/leaflet
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
runApp("../vol2")
source('app2.r')
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# http://rpubs.com/insight/leaflet
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# http://rpubs.com/insight/leaflet
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# http://rpubs.com/insight/leaflet
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
# Loads the Shiny and leaflet libraries.
library(shiny)
library(leaflet)
# http://rpubs.com/insight/leaflet
# Saves the breakfast cereal dataset to the `cereals` variable.
volmap <- read.csv("Voldata.csv", header=TRUE, stringsAsFactors=FALSE)
shinyUI(
# Use a fluid Bootstrap layout
fluidPage(
# Give the page a title
titlePanel("NYC Crime Statistics"),
mainPanel(leafletOutput("map"))
)
)
shinyServer(function(input, output) {
# Create our colors with a categorical color function
color <- colorFactor(topo.colors(7), volmap$CR)
output$map <- renderLeaflet({
map <- leaflet(volmap) %>%
setView(lng = -73.98928, lat = 40.75042, zoom = 10) %>%
addProviderTiles("CartoDB.Positron", options = providerTileOptions(noWrap = TRUE)) %>%
addCircleMarkers(
lng=~longitude,
lat=~latitude,
ele=~Elevation,
vei=~VEI,
stroke=FALSE,
fillOpacity=0.5,
color=~color(CR),
popup=~paste(
"<b>", CR, "</b><br/>",
"count: ", as.character(TOT), "<br/>",
"date: ", as.character(MO), "/", as.character(YR)
)
) %>%
addLegend(
"bottomleft", # Legend position
pal=color, # color palette
values=~CR, # legend values
opacity = 1,
title="Type of Crime Committed"
)
})
})
setwd("~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/Volcano2/leaflet")
setwd("~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/Volcano2/leaflet")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Chunk 1
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
# Chunk 2
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("./")
VolDat <- read.csv("VolData.csv", header = TRUE)
ElevationMean <- mean(VolDat$Elevation, na.rm=TRUE)
Num <- VolDat %>% group_by(VEI) %>% count()
avgNum <- mean(Num$VEI,na.rm=TRUE)
ggplot(VolDat,aes(VEI))+geom_histogram(color = "blue")
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("./")
VolDat <- read.csv("VolData.csv", header = TRUE)
ElevationMean <- mean(VolDat$Elevation, na.rm=TRUE)
Num <- VolDat %>% group_by(VEI) %>% count()
avgNum <- mean(Num$VEI,na.rm=TRUE)
ggplot(VolDat,aes(VEI))+geom_histogram(color = "blue")
# Chunk 1
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
# Chunk 2
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("./")
VolDat <- read.csv("VolData.csv", header = TRUE)
ElevationMean <- mean(VolDat$Elevation, na.rm=TRUE)
Num <- VolDat %>% group_by(VEI) %>% count()
avgNum <- mean(Num$VEI,na.rm=TRUE)
ggplot(VolDat,aes(VEI))+geom_histogram(color = "blue")
Volcanic Activity
========================================================
author: Hiren Patel
date: December 07, 2017
autosize: true
transition: concave
App Description
========================================================
!["This is what a volcano eruption looks like: Source:](http://s4.thingpic.com/images/Dv/qAKfoU9ckhNH6Bmgf1VJWhkT.jpeg)
<https://www.thinglink.com/scene/777592745177907201>
***
A visualization of Volcanic activity troughout the world
reveals interesting patterns of activity. With the help
of a "Shiny"" application, areas of volcanic activity reveal
"hot-spots" over time.
Data Source
========================================================
- From National Geophysical Data Center's Earthquake Database.
National Geophysical Data Center / World Data Service (NGDC/WDS):
Significant Volcanic Eruptions Database.
National Geophysical Data Center, NOAA. doi:10.7289/V5JW8BSH
- See Links for details on Data Source and GitHub [Links](#/Links).
```r
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
[1] 424   7
```
Summary of Volcainic Events
========================================================
![plot of chunk unnamed-chunk-2](VolcanicActivity-figure/unnamed-chunk-2-1.png)
***
- Great deal of variability between years
- Average Elevation is 2110.1533019
- Average Volcanic Explosivity Index (VEI) is 4
Links
========================================================
- GitHub Repo: <>
- Shiny App: <>
- NOAA : <https://www.ngdc.noaa.gov/nndc/servlet/ShowDatasets?dataset=102557&search_look=50&display_look=50>
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("./")
VolDat <- read.csv("VolData.csv", header = TRUE)
ElevationMean <- mean(VolDat$Elevation, na.rm=TRUE)
Num <- VolDat %>% group_by(VEI) %>% count()
avgNum <- mean(Num$VEI,na.rm=TRUE)
ggplot(VolDat,aes(VEI))+geom_histogram(color = "blue")
# Chunk 1
# See original dataset dimensions
VolDat <- read.csv("Volcano.csv", header = TRUE)
dim(VolDat)
# Chunk 2
library(ggplot2)
library(dplyr)
library(lubridate)
setwd("./")
VolDat <- read.csv("VolData.csv", header = TRUE)
ElevationMean <- mean(VolDat$Elevation, na.rm=TRUE)
Num <- VolDat %>% group_by(VEI) %>% count()
avgNum <- mean(Num$VEI,na.rm=TRUE)
ggplot(VolDat,aes(VEI))+geom_histogram(color = "blue")
runApp('~/Google Drive/My_Training/GitHub (1)/developing_data_products_wk4/Shiny_VolcanicVEI')
